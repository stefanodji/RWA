/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])})(e,t)};function e(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function t(n,e){var t,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;u;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=e.call(n,u)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function r(n){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&n[e],r=0;if(t)return t.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,o,i=t.call(n),u=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(n,e){for(var t=0,r=e.length,o=n.length;t<r;t++,o++)n[o]=e[t];return n}function u(n){return this instanceof u?(this.v=n,this):new u(n)}function c(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=t.apply(n,e||[]),i=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(n){o[n]&&(r[n]=function(e){return new Promise((function(t,r){i.push([n,e,t,r])>1||s(n,e)}))})}function s(n,e){try{(t=o[n](e)).value instanceof u?Promise.resolve(t.value.v).then(a,l):f(i[0][2],t)}catch(n){f(i[0][3],n)}var t}function a(n){s("next",n)}function l(n){s("throw",n)}function f(n,e){n(e),i.shift(),i.length&&s(i[0][0],i[0][1])}}function s(n){return"function"==typeof n}Object.create,Object.create;var a,l=((a=function(n){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(n,e){return e+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function f(n,e){if(n){var t=n.indexOf(e);0<=t&&n.splice(t,1)}}var d=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._teardowns=null}return n.prototype.unsubscribe=function(){var n,e,t,u,c;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=r(a),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(e){n={error:e}}finally{try{d&&!d.done&&(e=f.return)&&e.call(f)}finally{if(n)throw n.error}}else a.remove(this);var h=this.initialTeardown;if(s(h))try{h()}catch(n){c=n instanceof l?n.errors:[n]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=r(v),b=y.next();!b.done;b=y.next()){var m=b.value;try{p(m)}catch(n){c=null!=c?c:[],n instanceof l?c=i(i([],o(c)),o(n.errors)):c.push(n)}}}catch(n){t={error:n}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(t)throw t.error}}}if(c)throw new l(c)}},n.prototype.add=function(e){var t;if(e&&e!==this)if(this.closed)p(e);else{if(e instanceof n){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(t=this._teardowns)&&void 0!==t?t:[]).push(e)}},n.prototype._hasParent=function(n){var e=this._parentage;return e===n||Array.isArray(e)&&e.includes(n)},n.prototype._addParent=function(n){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(n),e):e?[e,n]:n},n.prototype._removeParent=function(n){var e=this._parentage;e===n?this._parentage=null:Array.isArray(e)&&f(e,n)},n.prototype.remove=function(e){var t=this._teardowns;t&&f(t,e),e instanceof n&&e._removeParent(this)},n.EMPTY=((e=new n).closed=!0,e),n;var e}();function h(n){return n instanceof d||n&&"closed"in n&&s(n.remove)&&s(n.add)&&s(n.unsubscribe)}function p(n){s(n)?n():n.unsubscribe()}d.EMPTY;var v=function(n){function t(e,t){return n.call(this)||this}return e(t,n),t.prototype.schedule=function(n,e){return void 0===e&&(e=0),this},t}(d),y={setInterval:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=y.delegate;return((null==t?void 0:t.setInterval)||setInterval).apply(void 0,i([],o(n)))},clearInterval:function(n){var e=y.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(n)},delegate:void 0},b=function(n){function t(e,t){var r=n.call(this,e,t)||this;return r.scheduler=e,r.work=t,r.pending=!1,r}return e(t,n),t.prototype.schedule=function(n,e){if(void 0===e&&(e=0),this.closed)return this;this.state=n;var t=this.id,r=this.scheduler;return null!=t&&(this.id=this.recycleAsyncId(r,t,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},t.prototype.requestAsyncId=function(n,e,t){return void 0===t&&(t=0),y.setInterval(n.flush.bind(n,this),t)},t.prototype.recycleAsyncId=function(n,e,t){if(void 0===t&&(t=0),null!=t&&this.delay===t&&!1===this.pending)return e;y.clearInterval(e)},t.prototype.execute=function(n,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var t=this._execute(n,e);if(t)return t;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,e){var t,r=!1;try{this.work(n)}catch(n){r=!0,t=!!n&&n||new Error(n)}if(r)return this.unsubscribe(),t},t.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,t=this.scheduler,r=t.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(v),m={now:function(){return(m.delegate||Date).now()},delegate:void 0},w=function(){function n(e,t){void 0===t&&(t=n.now),this.schedulerActionCtor=e,this.now=t}return n.prototype.schedule=function(n,e,t){return void 0===e&&(e=0),new this.schedulerActionCtor(this,n).schedule(t,e)},n.now=m.now,n}(),g=new(function(n){function t(e,t){void 0===t&&(t=w.now);var r=n.call(this,e,t)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return e(t,n),t.prototype.flush=function(n){var e=this.actions;if(this._active)e.push(n);else{var t;this._active=!0;do{if(t=n.execute(n.state,n.delay))break}while(n=e.shift());if(this._active=!1,t){for(;n=e.shift();)n.unsubscribe();throw t}}},t}(w))(b),E=g,x=null,T=null,_=void 0,L=!1,I=!1,k={setTimeout:function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=k.delegate;return((null==t?void 0:t.setTimeout)||setTimeout).apply(void 0,i([],o(n)))},clearTimeout:function(n){var e=k.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(n)},delegate:void 0};function S(n){k.setTimeout((function(){if(!x)throw n;x(n)}))}function C(){}var M=N("C",void 0,void 0);function N(n,e,t){return{kind:n,value:e,error:t}}var A=null;function P(n){L&&A&&(A.errorThrown=!0,A.error=n)}var B=function(n){function t(e){var t=n.call(this)||this;return t.isStopped=!1,e?(t.destination=e,h(e)&&e.add(t)):t.destination=K,t}return e(t,n),t.create=function(n,e,t){return new H(n,e,t)},t.prototype.next=function(n){this.isStopped?j(function(n){return N("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?j(N("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?j(M,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),H=function(n){function t(e,t,r){var o,i=n.call(this)||this;if(s(e))o=e;else if(e){var u;o=e.next,t=e.error,r=e.complete,i&&I?(u=Object.create(e)).unsubscribe=function(){return i.unsubscribe()}:u=e,o=null==o?void 0:o.bind(u),t=null==t?void 0:t.bind(u),r=null==r?void 0:r.bind(u)}return i.destination={next:o?O(o):C,error:O(null!=t?t:D),complete:r?O(r):C},i}return e(t,n),t}(B);function O(n,e){return function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];try{n.apply(void 0,i([],o(e)))}catch(n){L?P(n):S(n)}}}function D(n){throw n}function j(n,e){var t=T;t&&k.setTimeout((function(){return t(n,e)}))}var K={closed:!0,next:C,error:D,complete:C},F="function"==typeof Symbol&&Symbol.observable||"@@observable";function U(n){return n}function q(n){return 0===n.length?U:1===n.length?n[0]:function(e){return n.reduce((function(n,e){return e(n)}),e)}}var G=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(e){var t=new n;return t.source=this,t.operator=e,t},n.prototype.subscribe=function(n,e,t){var r,o=this,i=(r=n)&&r instanceof B||function(n){return n&&s(n.next)&&s(n.error)&&s(n.complete)}(r)&&h(r)?n:new H(n,e,t);return function(n){if(L){var e=!A;if(e&&(A={errorThrown:!1,error:null}),n(),e){var t=A,r=t.errorThrown,o=t.error;if(A=null,r)throw o}}else n()}((function(){var n=o,e=n.operator,t=n.source;i.add(e?e.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(e){n.error(e)}},n.prototype.forEach=function(n,e){var t=this;return new(e=R(e))((function(e,r){var o;o=t.subscribe((function(e){try{n(e)}catch(n){r(n),null==o||o.unsubscribe()}}),r,e)}))},n.prototype._subscribe=function(n){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(n)},n.prototype[F]=function(){return this},n.prototype.pipe=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return q(n)(this)},n.prototype.toPromise=function(n){var e=this;return new(n=R(n))((function(n,t){var r;e.subscribe((function(n){return r=n}),(function(n){return t(n)}),(function(){return n(r)}))}))},n.create=function(e){return new n(e)},n}();function R(n){var e;return null!==(e=null!=n?n:_)&&void 0!==e?e:Promise}function Y(n){return n&&s(n.schedule)}function z(n,e){return void 0===n&&(n=0),void 0===e&&(e=g),n<0&&(n=0),function(n,e,t){void 0===n&&(n=0),void 0===t&&(t=E);var r=-1;return null!=e&&(Y(e)?t=e:r=e),new G((function(e){var o,i=(o=n)instanceof Date&&!isNaN(o)?+n-t.now():n;i<0&&(i=0);var u=0;return t.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),i)}))}(n,n,e)}var J=new G((function(n){return n.complete()}));function Q(n){return function(e){if(function(n){return s(null==n?void 0:n.lift)}(e))return e.lift((function(e){try{return n(e,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}var V=function(n){function t(e,t,r,o,i){var u=n.call(this,e)||this;return u.onFinalize=i,u._next=t?function(n){try{t(n)}catch(n){e.error(n)}}:n.prototype._next,u._error=o?function(n){try{o(n)}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._error,u._complete=r?function(){try{r()}catch(n){e.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,u}return e(t,n),t.prototype.unsubscribe=function(){var e,t=this.closed;n.prototype.unsubscribe.call(this),!t&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},t}(B);function W(n,e){return Q((function(t,r){var o=0;t.subscribe(new V(r,(function(t){r.next(n.call(e,t,o++))})))}))}function X(n){return void 0===n&&(n=1/0),n<=0?function(){return J}:Q((function(e,t){var r,o=0,i=function(){var u=!1;r=e.subscribe(new V(t,void 0,(function(){++o<n?r?(r.unsubscribe(),r=null,i()):u=!0:t.complete()}))),u&&(r.unsubscribe(),r=null,i())};i()}))}var Z=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function $(n){return s(null==n?void 0:n.then)}function nn(n,e){return new G((function(t){var r=0;return e.schedule((function(){r===n.length?t.complete():(t.next(n[r++]),t.closed||this.schedule())}))}))}var en="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function tn(n,e){if(!n)throw new Error("Iterable cannot be null");return new G((function(t){var r=new d;return r.add(e.schedule((function(){var o=n[Symbol.asyncIterator]();r.add(e.schedule((function(){var n=this;o.next().then((function(e){e.done?t.complete():(t.next(e.value),n.schedule())}))})))}))),r}))}function rn(n){return s(n[F])}function on(n){return s(null==n?void 0:n[en])}function un(n){return Symbol.asyncIterator&&s(null==n?void 0:n[Symbol.asyncIterator])}function cn(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function sn(n){return c(this,arguments,(function(){var e,r,o;return t(this,(function(t){switch(t.label){case 0:e=n.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(e.read())];case 3:return r=t.sent(),o=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function an(n){return s(null==n?void 0:n.getReader)}function ln(n,e){return e?function(n,e){if(null!=n){if(rn(n))return function(n,e){return new G((function(t){var r=new d;return r.add(e.schedule((function(){var o=n[F]();r.add(o.subscribe({next:function(n){r.add(e.schedule((function(){return t.next(n)})))},error:function(n){r.add(e.schedule((function(){return t.error(n)})))},complete:function(){r.add(e.schedule((function(){return t.complete()})))}}))}))),r}))}(n,e);if(Z(n))return nn(n,e);if($(n))return function(n,e){return new G((function(t){return e.schedule((function(){return n.then((function(n){t.add(e.schedule((function(){t.next(n),t.add(e.schedule((function(){return t.complete()})))})))}),(function(n){t.add(e.schedule((function(){return t.error(n)})))}))}))}))}(n,e);if(un(n))return tn(n,e);if(on(n))return function(n,e){return new G((function(t){var r;return t.add(e.schedule((function(){r=n[en](),function(n,e,t,r){void 0===r&&(r=0);var o=e.schedule((function(){try{t.call(this)}catch(e){n.error(e)}}),r);n.add(o)}(t,e,(function(){var n=r.next(),e=n.value;n.done?t.complete():(t.next(e),this.schedule())}))}))),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(n,e);if(an(n))return function(n,e){return tn(sn(n),e)}(n,e)}throw cn(n)}(n,e):fn(n)}function fn(n){if(n instanceof G)return n;if(null!=n){if(rn(n))return o=n,new G((function(n){var e=o[F]();if(s(e.subscribe))return e.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Z(n))return dn(n);if($(n))return t=n,new G((function(n){t.then((function(e){n.closed||(n.next(e),n.complete())}),(function(e){return n.error(e)})).then(null,S)}));if(un(n))return hn(n);if(on(n))return e=n,new G((function(n){var t,o;try{for(var i=r(e),u=i.next();!u.done;u=i.next()){var c=u.value;if(n.next(c),n.closed)return}}catch(n){t={error:n}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}n.complete()}));if(an(n))return hn(sn(n))}var e,t,o;throw cn(n)}function dn(n){return new G((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}))}function hn(n){return new G((function(e){(function(n,e){var o,i,u,c,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,t=n[Symbol.asyncIterator];return t?t.call(n):(n=r(n),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(t){e[t]=n[t]&&function(e){return new Promise((function(r,o){!function(n,e,t,r){Promise.resolve(r).then((function(e){n({value:e,done:t})}),e)}(r,o,(e=n[t](e)).done,e.value)}))}}}(n),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(s=i.value,e.next(s),e.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=t.sent(),u={error:a},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,e){function t(n){try{o(f.next(n))}catch(n){e(n)}}function r(n){try{o(f.throw(n))}catch(n){e(n)}}function o(e){var o;e.done?n(e.value):(o=e.value,o instanceof l?o:new l((function(n){n(o)}))).then(t,r)}o((f=f.apply(s,a||[])).next())}))})(n,e).catch((function(n){return e.error(n)}))}))}function pn(n,e,t){return void 0===t&&(t=1/0),s(e)?pn((function(t,r){return W((function(n,o){return e(t,n,r,o)}))(fn(n(t,r)))}),t):("number"==typeof e&&(t=e),Q((function(e,r){return function(n,e,t,r,o,i,u,c){var s=[],a=0,l=0,f=!1,d=function(){!f||s.length||a||e.complete()},h=function(n){return a<r?p(n):s.push(n)},p=function(n){a++;var o=!1;fn(t(n,l++)).subscribe(new V(e,(function(n){e.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)n=void 0,n=s.shift(),p(n);d()}catch(n){e.error(n)}var n})))};return n.subscribe(new V(e,h,(function(){f=!0,d()}))),function(){}}(e,r,n,t)})))}var vn=Array.isArray;function yn(n,e){return e?nn(n,e):dn(n)}var bn=["addListener","removeListener"],mn=["addEventListener","removeEventListener"],wn=["on","off"];function gn(n,e,t,r){if(s(t)&&(r=t,t=void 0),r)return gn(n,e,t).pipe((u=r,W((function(n){return function(n,e){return vn(e)?n.apply(void 0,i([],o(e))):n(e)}(u,n)}))));var u,c=o(function(n){return s(n.addEventListener)&&s(n.removeEventListener)}(n)?mn.map((function(r){return function(o){return n[r](e,o,t)}})):function(n){return s(n.addListener)&&s(n.removeListener)}(n)?bn.map(En(n,e)):function(n){return s(n.on)&&s(n.off)}(n)?wn.map(En(n,e)):[],2),a=c[0],l=c[1];if(!a&&Z(n))return pn((function(n){return gn(n,e,t)}))(yn(n));if(!a)throw new TypeError("Invalid event target");return new G((function(n){var e=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.next(1<e.length?e:e[0])};return a(e),function(){return l(e)}}))}function En(n,e){return function(t){return function(r){return n[t](e,r)}}}function xn(n,e){return Q((function(t,r){var o=null,i=0,u=!1,c=function(){return u&&!o&&r.complete()};t.subscribe(new V(r,(function(t){null==o||o.unsubscribe();var u=0,s=i++;fn(n(t,s)).subscribe(o=new V(r,(function(n){return r.next(e?e(t,n,s,u++):n)}),(function(){o=null,c()})))}),(function(){u=!0,c()})))}))}var Tn,_n,Ln="http://localhost:3000";function In(n){return ln(fetch(Ln+"/notes/?keyAssigned="+n).then((function(n){if(n.ok)return n.json();throw new Error("Notes Not Found")})).catch((function(n){return console.log("Error: "+n)})))}function kn(n,e){var t=document.createElement("div");t.className="noteOrChordDislayDiv",t.innerHTML=""+n.name;var r=n.pathToNote;gn(t,"click").pipe(W((function(n){return n.target.innerHTML}))).subscribe((function(e){console.log("Playing Note: "+e),Sn(r),Cn(document.getElementById(""+n.id))})),e.appendChild(t)}function Sn(n){new Audio(n).play()}function Cn(n){var e=document.createElement("div");e.className="shineDiv",n.appendChild(e),setTimeout((function(){n.removeChild(e)}),2300)}var Mn=document.getElementById("pianoContainer");function Nn(n,e){var t=document.createElement("div");t.className="noteOrChordDislayDiv";var r=document.createElement("p");r.innerHTML=n.name.split("-")[0],t.appendChild(r);var o=document.createElement("p");o.innerHTML=n.name.split("-")[1],t.appendChild(o),gn(t,"click").pipe(W((function(n){return n.target.innerHTML}))).subscribe((function(e){var t;console.log("Playing Chord: "+e);for(var r=0;r<n.notesAssigned.length;r++)t=n.notesAssigned[r].pathToNote,new Audio(t).play(),Cn(document.getElementById(""+n.notesAssigned[r].id))})),e.appendChild(t)}var An,Pn=document.getElementById("displayNotesOrChordsContainer"),Bn="";var Hn=1;function On(n){for(var e=0;e<7;e++)Dn(n,e)}function Dn(n,e){var t=document.createElement("div");t.className="whiteKey",t.id=Hn.toString(),Hn++,n.appendChild(t);var r=document.createElement("div");r.className="whiteKeyLabelUp",r.classList.add("whiteKeyLabelUp"+e);var o=document.createElement("div");o.className="whiteKeyLabelDown",t.appendChild(r),t.appendChild(o),2!=e&&6!=e&&function(n,e){var t=document.createElement("div");t.className="blackKey blackKey"+e,t.id=Hn.toString(),Hn++;var r=document.createElement("div");r.className="blackKeyLabelUp",t.appendChild(r);var o=document.createElement("img");o.src="../../imagesPiano/blackPianoKey.png",o.style.width="100%",o.style.height="100%",t.append(o),n.appendChild(t)}(t,e)}var jn,Kn,Fn,Un=-1,qn=["q","w","e","r","t","y","u","i","o","p","z","x","c","v","b","n","m",",",".","/","+"],Gn=["2","3","5","6","7","9","0","s","d","f","h","j","l",";","'"],Rn=["C3","D3","E3","F3","G3","A3","B3","C4","D4","E4","F4","G4","A4","B4","C5","D5","E5","F5","G5","A5","B5"];function Yn(n){return void 0===n&&(n=1/0),pn(U,n)}function zn(n){return n[n.length-1]}function Jn(n){return Y(zn(n))?n.pop():void 0}function Qn(n,e){return"number"==typeof zn(n)?n.pop():e}var Vn,Wn,Xn="../../../notesMetronome/metronomeSound.wav",Zn=!1,$n=120;function ne(n){if("Off"==document.getElementById("metronomeOnOff").innerHTML)return $n;Zn&&(Zn=!1,ee.unsubscribe());var e=document.getElementById("beepPerMinuteDiv");return"-"==n?($n>20?$n-=10:alert("Can't slow down more buddy :("),e.innerHTML=$n+" bpm"):($n<260?$n+=10:alert("Can't speed up more buddy :("),e.innerHTML=$n+" bpm"),$n}var ee,te,re,oe,ie,ue,ce=z(500).pipe(W((function(){Sn(Xn)})));z(1e3).pipe((5,Q((function(n,e){var t=0;n.subscribe(new V(e,(function(n){++t<=5&&(e.next(n),5<=t&&e.complete())})))})))).subscribe((function(n){var e;4==n&&((e=document.getElementById("homePageText")).innerHTML="Let's get started immediately!",e.style.animation="fadeIn 2s",e.style.opacity="1")})),(te=document.getElementsByClassName("noteChordButton"))[0].addEventListener("click",(function(){!function(){""!==Pn.innerHTML&&(Pn.innerHTML="",An.unsubscribe()),Bn="notes";var n=0;An=ln(fetch(Ln+"/notes/").then((function(n){if(n.ok)return n.json();throw new Error("Notes Not Found")})).catch((function(n){return console.log("Error: "+n)}))).pipe(W((function(e){return e.length,e[n++]})),X(36)).subscribe((function(n){return kn(n,Pn)}))}()})),te[1].addEventListener("click",(function(){!function(){""!==Pn.innerHTML&&(Pn.innerHTML="",An.unsubscribe()),Bn="chords";var n=0;An=ln(fetch(Ln+"/chords/").then((function(n){if(n.ok)return n.json();throw new Error("Chords Not Found")})).catch((function(n){return console.log("Error: "+n)}))).pipe(W((function(e){return e.length,e[n++]})),X(14)).subscribe((function(n){return Nn(n,Pn)}))}()})),(re=document.getElementById("playAndStopButton")).addEventListener("click",(function(){!function(n){"Play Now"===n.innerHTML?(Tn=gn(document,"keydown").pipe(W((function(n){return n.key})),xn((function(n){return In(n)})),W((function(n){return n[0]}))).subscribe((function(n){var e,t;Sn(n.pathToNote),e=document.getElementById(""+n.id),(t=document.createElement("div")).className="shineDiv",e.appendChild(t)})),_n=gn(document,"keyup").pipe(W((function(n){return n.key})),xn((function(n){return In(n)})),W((function(n){return n[0]}))).subscribe((function(n){!function(n){for(var e=Mn.querySelectorAll(".shineDiv"),t=0;t<e.length;t++)e[t].remove()}(document.getElementById(""+n.id))})),n.innerHTML="Stop"):(Tn.unsubscribe(),_n.unsubscribe(),n.innerHTML="Play Now")}(re)})),document.getElementById("labelingDiv").addEventListener("click",(function(){!function(){switch(++Un%4){case 0:jn=document.getElementsByClassName("whiteKeyLabelUp"),Kn=document.getElementsByClassName("blackKeyLabelUp");for(var n=0;n<jn.length;n++)jn[n].innerHTML=qn[n];for(n=0;n<Kn.length;n++)Kn[n].innerHTML=Gn[n];break;case 1:for(Fn=document.getElementsByClassName("whiteKeyLabelDown"),n=0;n<Fn.length;n++)Fn[n].innerHTML=Rn[n];break;case 2:for(jn=document.getElementsByClassName("whiteKeyLabelUp"),Kn=document.getElementsByClassName("blackKeyLabelUp"),n=0;n<jn.length;n++)jn[n].innerHTML="";for(n=0;n<Kn.length;n++)Kn[n].innerHTML="";break;case 3:for(Fn=document.getElementsByClassName("whiteKeyLabelDown"),n=0;n<Fn.length;n++)Fn[n].innerHTML=""}}()})),Vn=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];var t=Jn(n),r=Qn(n,1/0),o=n;return o.length?1===o.length?fn(o[0]):Yn(r)(yn(o,t)):J}((ie=document.getElementById("metronomeSlowDown"),gn(ie,"click").pipe(W((function(){return ne("-")})))),(oe=document.getElementById("metronomeSpeedUp"),gn(oe,"click").pipe(W((function(){return ne("+")}))))).pipe(xn((function(n){return function(n){return console.log("Metronome speed: "+n+"bpm"),z(n=60/n*1e3).pipe(W((function(){return Sn(Xn)})))}(n)}))),document.getElementById("metronomeMain").addEventListener("click",(function(){var n,e,t;n=document.getElementById("metronomeOnOff"),e=document.getElementById("metronomeDiv"),(t=document.createElement("div")).id="beepPerMinuteDiv",t.innerHTML="120 bpm","Off"==n.innerHTML?(n.innerHTML="On",Zn=!0,ee=ce.subscribe(),console.log("Metronome speed: 120bpm"),Wn=Vn.subscribe(),e.appendChild(t)):(n.innerHTML="Off",Wn.unsubscribe(),ee.unsubscribe(),Zn=!1,document.getElementById("beepPerMinuteDiv").remove())})),gn(document.getElementById("filterInput"),"input").pipe((100,void 0===ue&&(ue=g),Q((function(n,e){var t=null,r=null,o=null,i=function(){if(t){t.unsubscribe(),t=null;var n=r;r=null,e.next(n)}};function u(){var n=o+100,r=ue.now();if(r<n)return t=this.schedule(void 0,n-r),void e.add(t);i()}n.subscribe(new V(e,(function(n){r=n,o=ue.now(),t||(t=ue.schedule(u,100),e.add(t))}),(function(){i(),e.complete()}),void 0,(function(){r=t=null})))}))),W((function(n){return n.target.value})),xn((function(n){return ln("notes"==Bn?fetch(Ln+"/notes/?name_like="+n).then((function(n){if(n.ok)return n.json();throw new Error("Notes Not Found")})).catch((function(n){return console.log("Error: "+n)})):fetch(Ln+"/chords/?name_like="+n).then((function(n){if(n.ok)return n.json();throw new Error("Chords Not Found")})).catch((function(n){return console.log("Error: "+n)})))}))).subscribe((function(n){Pn.innerHTML="","notes"==Bn?n.forEach((function(n){kn(n,Pn)})):n.forEach((function(n){Nn(n,Pn)}))})),function(){for(var n=document.getElementById("pianoResponsiveDiv"),e=0;e<3;e++)On(n);var t=document.createElement("img");t.src="../../imagesPiano/AllPiano.png",t.className="imagePiano",n.append(t)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,